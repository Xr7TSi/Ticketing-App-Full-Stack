Deploy process for AWS ECT using NGINX, Certbot and Forever:


Important notes:

- Redis may need to be started manually.  This command causes redis to persist after connection is dropped: 
    -Start Redis as a service: sudo systemctl start redis
    -Stop Redis: sudo systemctl stop redis
    -Check if redis is running.  Should reply pong: redis-cli ping

- process.env variables may need to be set manually.  These include server/index.js and server/src/helpers/email.helper.js and server/src/helpers/jwt.helper.js



1. Create EC2 instance, install node.js, use git to clone application code, install nginx
    instructions: https://betterprogramming.pub/deploy-mern-stack-app-on-aws-ec2-with-letsencrypt-ssl-8f463c01502a

    NGINX commands:
    sudo service nginx restart
    sudo service nginx reload
    sudo service nginx status
    sudo service nginx start
    sudo service nginx stop 0  (where 0 is the index of the proces id)


2.  Install forever on server side of the application to ensure server side runs after connection is dropped:

    Install forever: 

        sudo npm i -g forever

        forever index.js &

    To launch server and keep it running after connection is dropped:
    
        sudo forever index.js &

    Check if forever process are running: 

        sudo forever list

    *Forever is a Node.js module that can be used to run Node.js applications on a schedule.  In this case,  it is used to keep the server running after the connection to the server is dropped.
    *Forever has been added to the Ubuntu instance. 

    Stop Forever:
    
        Check which Forecer processes are running:   
        Stop the process:  sudo forever stop 0  (where 0 is the first process)
 
    Note:  If you're getting an error that port 5000 is in use after making chages, here's the command to manuall shut down the port:
    sudo fuser -k 5000/tcp


3. In AWS dashboard, create an elastic IP associated with the new EC2 instance.


4. In AWS Route 53, acquire a domain name.  Add Type A records to tie the elastic IP to the domain name (ex xr7tsi.com and www.xr7tsi.com).


5. Install certbot in the same directory as the application code.
    -run these seperatly, in order: 

    -sudo snap install core; sudo snap refresh core

    -sudo snap install --classic certbot

    -sudo ln -s /snap/bin/certbot /usr/bin/certbot

    -sudo certbot --nginx

    -sudo certbot renew --dry-run


6. Update esc/nginx/sites-enabled/default (example below)

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#


server {
listen 80 default_server;
listen [::]:80 default_server;

 # SSL configuration
 #
 # listen 443 ssl default_server;
 # listen [::]:443 ssl default_server;
 #
 # Note: You should disable gzip for SSL traffic.
 # See: https://bugs.debian.org/773332
 #
 # Read up on ssl_ciphers to ensure a secure configuration.
 # See: https://bugs.debian.org/765782
 #
 # Self signed certs generated by the ssl-cert package
 # Don't use them in a production server!
 #
 # include snippets/snakeoil.conf;

root /var/www/html;

 # Add index.php to the list if you are using PHP
 index index.html index.htm index.nginx-debian.html;

server_name _;

location / {
 # First attempt to serve request as file, then
 # as directory, then fall back to displaying a 404.
try_files $uri $uri/ =404;
}

 # pass PHP scripts to FastCGI server
 #
 #location ~ \.php$ {
 #       include snippets/fastcgi-php.conf;
 #
 #       # With php-fpm (or other unix sockets):
 #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
 #       # With php-cgi (or other tcp sockets):
 #       fastcgi_pass 127.0.0.1:9000;
 #}

 # deny access to .htaccess files, if Apache's document root
 # concurs with nginx's one
 #
 #location ~ /\.ht {
 #       deny all;
 #}
}

# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#try_files $uri $uri/ =404;
#       }
#}

server {

 # SSL configuration
 #
 # listen 443 ssl default_server;
 # listen [::]:443 ssl default_server;
 #
 # Note: You should disable gzip for SSL traffic.
 # See: https://bugs.debian.org/773332
 #
 # Read up on ssl_ciphers to ensure a secure configuration.
 # See: https://bugs.debian.org/765782
 #
 # Self signed certs generated by the ssl-cert package
 # Don't use them in a production server!
 #
 # include snippets/snakeoil.conf;

root /var/www/html;

 # Add index.php to the list if you are using PHP
index index.html index.htm index.nginx-debian.html;
server_name jonathanrein.com www.jonathanrein.com; # managed by Certbot


    location /v1/ {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_http_version 1.1;
            proxy_pass http://localhost:5000;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
    }



    location / {
            root /home/ubuntu/Ticketing-App-Full-Stack/client/build/;
            try_files $uri /index.html;
    }


#       location / {
 # First attempt to serve request as file, then
 # as directory, then fall back to displaying a 404.
#try_files $uri $uri/ =404;
#       }

 # pass PHP scripts to FastCGI server
 #
 #location ~ \.php$ {
 #       include snippets/fastcgi-php.conf;
 #
 #       # With php-fpm (or other unix sockets):
 #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
 #       # With php-cgi (or other tcp sockets):
 #       fastcgi_pass 127.0.0.1:9000;
 #}

 # deny access to .htaccess files, if Apache's document root
 # concurs with nginx's one
 #
 #location ~ /\.ht {
 #       deny all;
 #}


listen [::]:443 ssl ipv6only=on; # managed by Certbot
listen 443 ssl; # managed by Certbot
ssl_certificate /etc/letsencrypt/live/jonathanrein.com/fullchain.pem; # managed by Certbot
ssl_certificate_key /etc/letsencrypt/live/jonathanrein.com/privkey.pem; # managed by Certbot
include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot



}

}
server {
if ($host = www.jonathanrein.com) {
return 301 https://$host$request_uri;
} # managed by Certbot


if ($host = jonathanrein.com) {
return 301 https://$host$request_uri;
} # managed by Certbot


listen 80 ;
listen [::]:80 ;
server_name jonathanrein.com www.jonathanrein.com;
return 404; # managed by Certbot




}









